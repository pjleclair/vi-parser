[{"/Users/Phillip/repos/vi-parser/frontend/src/index.js":"1","/Users/Phillip/repos/vi-parser/frontend/src/App.js":"2","/Users/Phillip/repos/vi-parser/frontend/src/components/fileprocessor.js":"3","/Users/Phillip/repos/vi-parser/frontend/src/components/sidebar.js":"4","/Users/Phillip/repos/vi-parser/frontend/src/components/header.js":"5","/Users/Phillip/repos/vi-parser/frontend/src/components/configurations.js":"6","/Users/Phillip/repos/vi-parser/frontend/src/services/loginService.js":"7","/Users/Phillip/repos/vi-parser/frontend/src/components/notification.js":"8","/Users/Phillip/repos/vi-parser/frontend/src/components/home.js":"9"},{"size":232,"mtime":1684174523442,"results":"10","hashOfConfig":"11"},{"size":4617,"mtime":1684958451790,"results":"12","hashOfConfig":"11"},{"size":6599,"mtime":1685482393417,"results":"13","hashOfConfig":"11"},{"size":1503,"mtime":1685460868121,"results":"14","hashOfConfig":"11"},{"size":263,"mtime":1684944585728,"results":"15","hashOfConfig":"11"},{"size":9168,"mtime":1685481464318,"results":"16","hashOfConfig":"11"},{"size":232,"mtime":1684871195403,"results":"17","hashOfConfig":"11"},{"size":498,"mtime":1684958018993,"results":"18","hashOfConfig":"11"},{"size":345,"mtime":1684945158022,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"andl3e",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Phillip/repos/vi-parser/frontend/src/index.js",[],[],[],"/Users/Phillip/repos/vi-parser/frontend/src/App.js",[],[],"/Users/Phillip/repos/vi-parser/frontend/src/components/fileprocessor.js",["51"],[],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './fileprocessor.css'\nimport Notification from './notification'\n\nconst FileProcessor = ({token}) => {\n  const [file, setFile] = useState(null);\n  const [configurations, setConfigurations] = useState([]);\n  const [selectedConfiguration, setSelectedConfiguration] = useState(null);\n  const [uploadMsg, setUploadMsg] = useState(null);\n  const [gptArray, setGptArray] = useState([])\n  const [orgName, setOrgName] = useState(\"\")\n  const [campaignDesc, setCampaignDesc] = useState(\"\")\n  const [narrative, setNarrative] = useState(\"\")\n  const [donateLink, setDonateLink] = useState(\"\")\n  const [deliveryMethod, setDeliveryMethod] = useState(\"email\")\n\n  useEffect(() => {\n    fetchConfigurations();\n  }, []);\n\n  useEffect(()=> {\n    if (uploadMsg !== \"\") {\n      setTimeout(() => {\n        setUploadMsg(\"\")\n      }, 5000);\n    }\n  },[uploadMsg])\n\n  const fetchConfigurations = () => {\n      const config = {\n        headers: {\n          Authorization: token\n        }\n      }\n      axios.get('/api/configurations/',config)\n      .then((response) => {\n        setConfigurations(response.data)\n      })\n      .catch((error) => {\n        console.log({msg: 'Error fetching configurations', color: \"#CF6679\"});\n    });\n  };\n\n  const handleConfigurationSelect = (event) => {\n    const selectedConfigId = event.target.value;\n    const selectedConfig = configurations.find((config) => config._id === selectedConfigId);\n    setSelectedConfiguration(selectedConfig);\n  };\n\n  const handleFileUpload = (event) => {\n    const uploadedFile = event.target.files[0];\n    setFile(uploadedFile);\n  };\n\n  const handleUpload = async () => {\n    if (!file || !selectedConfiguration) {\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('configuration', JSON.stringify(selectedConfiguration));\n    formData.append('campaignDesc', campaignDesc);\n    formData.append('orgName', orgName);\n    formData.append('narrative', narrative);\n    formData.append('donateLink', donateLink);\n    formData.append('deliveryMethod', deliveryMethod);\n\n    const config = {\n      headers: {\n        Authorization: token\n      }\n    }\n\n    try {\n      const response = await axios.post('/api/upload/', formData, config);\n      setUploadMsg({msg: response.data.message, color: '#03DAC5'});\n      setGptArray(response.data.gpt);\n      // Perform further processing or handle the server response here\n    } catch (error) {\n      console.log('Error uploading file:', error);\n      setUploadMsg({msg: error.response.data.error, color: \"#CF6679\"})\n    }\n  };\n\n  const handleCampaignDescChange = (e) => {\n    setCampaignDesc(e.target.value)\n  }\n\n  const handleOrgNameChange = (e) => {\n    setOrgName(e.target.value)\n  }\n  \n  const handleNarrativeChange = (e) => {\n    setNarrative(e.target.value)\n  }\n\n  const handleDonateLinkChange = (e) => {\n    setDonateLink(e.target.value)\n  }\n\n  const handleDeliveryMethodChange = (e) => {\n    console.log(e.target.value)\n    setDeliveryMethod(e.target.value)\n  }\n\n  return (\n    <div className='processor-container'>\n      {(uploadMsg) && <Notification message={uploadMsg.msg} msgColor={uploadMsg.color}/>}\n      <h1 style={{color: \"#FFFFFF\"}}>File Processor</h1>\n      <div className='config-select-container'>\n        <h2 style={{color: \"#8CFC86\",margin:'0 0 .5rem 0'}}>Select Configuration:</h2>\n          {configurations && configurations.length > 0 ? (\n            <div className='select'>\n              <select onChange={handleConfigurationSelect}>\n                <option value=\"\">Select Configuration</option>\n                {configurations.map((config) => (\n                  <option key={config._id} value={config._id}>\n                    {config.name}\n                  </option>\n                ))}\n              </select>\n              <span className='focus'></span>\n            </div>\n          ) : (\n            <p className='no-configs'>No configurations found.</p>\n          )}\n      </div>\n      <div className='gpt-container'>\n        <h2 style={{color: \"#8CFC86\"}}>GPT Details:</h2>\n        <div className='config-container'>\n          <div id='gpt-field'>\n            <h3>Campaign description:</h3>\n            <input onChange={handleCampaignDescChange} value={campaignDesc} placeholder='ex: democratic political campaign'></input>\n          </div>\n          <div id='gpt-field'>\n            <h3>Organization name:</h3>\n            <input onChange={handleOrgNameChange} value={orgName} placeholder='ex: World Economic Forum'></input>\n          </div>\n          <div id='gpt-field'>\n            <h3>Narrative:</h3>\n            <input onChange={handleNarrativeChange} value={narrative} placeholder='ex: environmental values'></input>\n          </div>\n          <div id='gpt-field'>\n            <h3>Donate Link:</h3>\n            <input onChange={handleDonateLinkChange} value={donateLink} placeholder='ex: https://bit.ly/ShJ67w'></input>\n          </div>\n        </div>\n        <div id='divider' style={{border: \"1px solid rgb(47, 51, 54)\", width: '100%', margin: '1rem'}}></div>\n        <div className='upload-container'>\n          <div className='file-container'>\n            <h2 style={{color: \"#8CFC86\"}}>Upload File:</h2>\n            <input id='file' type=\"file\" accept=\".xlsx,.xls\" onChange={handleFileUpload} />\n          </div>\n          <div className='delivery-container'>\n            <h2 style={{color: \"#8CFC86\"}}>Delivery Method:</h2>\n            <div className='radio-container'>\n              <div id='radio'>\n                <input name='deliveryMethod' type=\"radio\" onChange={handleDeliveryMethodChange} id='text' checked={deliveryMethod === 'text'} value='text'/>\n                <label>Text</label>\n              </div>\n              <div id='radio'>\n                <input name='deliveryMethod' type=\"radio\" onChange={handleDeliveryMethodChange} id='email' checked={deliveryMethod === 'email'} value='email'/>\n                <label>Email</label>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <br />\n      <button className='upload-button' onClick={handleUpload}>Upload</button>\n      <br/>\n      {((gptArray)&&(gptArray.length > 0)) && (\n        <div className='gpt-array'>\n          <h1>Generated Content:</h1>\n            {gptArray.map((message,i) => {\n            return <p id='gpt' key={i}\n             dangerouslySetInnerHTML={{__html: message.trim()}}></p>\n          })}\n        </div>\n      )}\n      <div id='mobile'></div>\n    </div>\n  );\n};\n\nexport default FileProcessor;\n","/Users/Phillip/repos/vi-parser/frontend/src/components/sidebar.js",[],[],"/Users/Phillip/repos/vi-parser/frontend/src/components/header.js",[],[],"/Users/Phillip/repos/vi-parser/frontend/src/components/configurations.js",["52"],[],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './configurations.css'; // Assuming you have a corresponding CSS file for styling\nimport Notification from './notification'\n\nconst Configurations = ({ onFileUpload, jsonData, token }) => {\n  const [columnMappings, setColumnMappings] = useState({});\n  const [sampleData, setSampleData] = useState([]);\n  const [name, setName] = useState('');\n  const [updateMsg, setUpdateMsg] = useState(null);\n  const [configurations, setConfigurations] = useState([])\n  const [selectedConfiguration, setSelectedConfiguration] = useState({name:''})\n\n  useEffect(() => {\n    if (jsonData && jsonData.length > 0) {\n      setSampleData(jsonData[0]);\n      setColumnMappings(\n        Object.keys(jsonData[0]).reduce((acc, key, index) => {\n          acc[index] = '';\n          return acc;\n        }, {})\n      );\n    }\n  }, [jsonData]);\n\n  useEffect(()=> {\n    if (updateMsg !== \"\") {\n      setTimeout(() => {\n        setUpdateMsg(\"\")\n      }, 5000);\n    }\n  },[updateMsg])\n\n  useEffect(()=> {\n    fetchConfigurations();\n  },[])\n\n  const fetchConfigurations = () => {\n    const config = {\n      headers: {\n        Authorization: token\n      }\n    }\n    axios.get('/api/configurations/',config)\n    .then((response) => {\n      setConfigurations(response.data)\n    })\n    .catch((error) => {\n      console.log({msg: 'Error fetching configurations', color: '#CF6679'});\n    });\n  };\n\n  const handleConfigurationSelect = (event) => {\n    const selectedConfigId = event.target.value;\n    if (selectedConfigId === 'select')\n      setSelectedConfiguration({name:''})\n    const selectedConfig = configurations.find((config) => config._id === selectedConfigId);\n    setSelectedConfiguration(selectedConfig);\n  };\n\n  const handleColumnMapping = (e) => {\n    const { name, value } = e.target;\n    setColumnMappings((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const handleInputChange = (e) => {\n    setName(e.target.value);\n  };\n\n  const saveConfiguration = (name,columnMappings) => {\n    const configuration = {\n      name,\n      columnMappings: {...columnMappings}\n    }\n    const config = {\n      headers: {\n        Authorization: token\n      }\n    }\n    console.log(config,token)\n    axios.post('/api/configurations/', configuration, config)\n      .then((response) => {\n        console.log('Configuration saved successfully:', response.data);\n        setUpdateMsg({msg: response.data.message, color: \"#03DAC5\"});\n      })\n      .catch((error) => {\n        console.error('Error saving configuration:', error);\n        setUpdateMsg({msg: error.response.data.error, color: \"#CF6679\"});\n      });\n  };\n\n  const updateConfiguration = (name,id,columnMappings) => {\n    const configuration = {\n      name,\n      id,\n      columnMappings: {...columnMappings}\n    }\n    const config = {\n      headers: {\n        Authorization: token\n      }\n    }\n    axios.put('/api/configurations/', configuration, config)\n      .then((response) => {\n        console.log('Configuration updated successfully:', response.data);\n        setUpdateMsg({msg: response.data.message, color: \"#03DAC5\"});\n      })\n      .catch((error) => {\n        console.error('Error updating configuration:', error);\n        setUpdateMsg({msg: error.response.data.error, color: \"#CF6679\"});\n      });\n  };\n\n  const deleteConfiguration = (id) => {\n    const config = {\n      headers: {\n        Authorization: token\n      }\n    }\n    if (window.confirm(\"Are you sure you want to delete this configuration?\"))\n    {\n      axios.delete(`/api/configurations/${id}`,config)\n        .then((response) => {\n          console.log('Configuration deleted succesfully');\n          setUpdateMsg({msg: response.data.message, color: \"#03DAC5\"});\n        })\n        .catch((error) => {\n          console.error('Error deleting configuration:', error);\n          setUpdateMsg({msg: error.response.data.error, color: \"#CF6679\"});\n        });\n    } else {setUpdateMsg({msg: \"Configuration deletion aborted\", color: \"#CF6679\"})}\n  }\n\n  return (\n    <div className=\"configurations\">\n      {(updateMsg) && <Notification message={updateMsg.msg} msgColor={updateMsg.color}/>}\n      <h1 style={{color: \"#FFFFFF\"}}>Configurations</h1>\n      <div className='select-config-container'>\n        <div className='upload-config-container'>\n          <p style={{width: 'fit-content', margin: '0'}}>Upload a file below to create a configuration:</p>\n          <input type=\"file\" onChange={onFileUpload} />\n          {sampleData.length > 0 && (\n            <div className=\"column-mapping\">\n              <h2>Column Mapping:</h2>\n              <table>\n                <thead>\n                  <tr>\n                    <th>Column</th>\n                    <th>Value</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {Object.keys(sampleData).map((columnName, index) => (\n                    <tr key={index}>\n                      <td>{sampleData[index]}</td>\n                      <td className='select'>\n                        <select\n                          name={index}\n                          value={columnMappings[index]}\n                          onChange={handleColumnMapping}\n                        >\n                          <option value=\"\">Select Value</option>\n                          <option value=\"fullName\">Full Name</option>\n                          <option value=\"phoneNumber\">Phone Number</option>\n                          <option value=\"emailAddress\">Email Address</option>\n                          <option value=\"party\">Party</option>\n                          <option value=\"age\">Age</option>\n                        </select>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n              <input type=\"text\" value={name} onChange={handleInputChange} placeholder=\"Configuration Name\" />\n              <button onClick={() => saveConfiguration(name, columnMappings)}>\n                Save Configuration\n              </button>\n            </div>\n          )}\n        </div>\n        <div id='divider'></div>\n        <div className='update-config-container'>\n          <p style={{width: 'fit-content', margin: '0'}}>Select an existing configuration to update or delete:</p>\n            {configurations && configurations.length > 0 ? (\n              <div className='config-update-container'>\n                <div className='select'>\n                  <select onChange={handleConfigurationSelect}>\n                    <option value=\"select\">Select Configuration</option>\n                    {configurations.map((config) => (\n                      <option key={config._id} value={config._id}>\n                        {config.name}\n                      </option>\n                    ))}\n                  </select>\n                  <span className='focus'></span>\n                </div>\n                {(selectedConfiguration && (selectedConfiguration.name.length > 0)) && (<button id='delete' onClick={()=>deleteConfiguration(selectedConfiguration._id)}>Delete</button>)}\n              </div>\n            ) : (\n              <p className='no-configs'>No configurations found.</p>\n            )}\n            {(selectedConfiguration && (selectedConfiguration.name.length > 0)) && (\n              <div className=\"column-mapping\">\n                <h2>Column Mapping:</h2>\n                <table>\n                  <thead>\n                    <tr>\n                      <th>Column</th>\n                      <th>Value</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {Object.keys(selectedConfiguration.columnMappings).map((columnName, index) => (\n                      <tr key={index}>\n                        <td>{columnName}</td>\n                        <td className='select'>\n                          <select\n                            name={index}\n                            value={selectedConfiguration.columnMappings[index]}\n                            onChange={handleColumnMapping}\n                          >\n                            <option value=\"\">Select Value</option>\n                            <option value=\"fullName\">Full Name</option>\n                            <option value=\"phoneNumber\">Phone Number</option>\n                            <option value=\"emailAddress\">Email Address</option>\n                            <option value=\"party\">Party</option>\n                            <option value=\"age\">Age</option>\n                          </select>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n                <input type=\"text\" value={name} onChange={handleInputChange} placeholder=\"Configuration Name\" />\n                <button id='update' onClick={() => updateConfiguration(name, selectedConfiguration._id, columnMappings)}>\n                  Update Configuration\n                </button>\n            </div>\n            )}\n          </div>\n        </div>\n        <div id='mobile'></div>\n      </div>\n    );\n};\n\nexport default Configurations;\n",[],"/Users/Phillip/repos/vi-parser/frontend/src/services/loginService.js",[],["53"],"/Users/Phillip/repos/vi-parser/frontend/src/components/notification.js",[],[],"/Users/Phillip/repos/vi-parser/frontend/src/components/home.js",[],[],{"ruleId":"54","severity":1,"message":"55","line":20,"column":6,"nodeType":"56","endLine":20,"endColumn":8,"suggestions":"57"},{"ruleId":"54","severity":1,"message":"55","line":36,"column":5,"nodeType":"56","endLine":36,"endColumn":7,"suggestions":"58"},{"ruleId":"59","severity":1,"message":"60","line":10,"column":1,"nodeType":"61","endLine":10,"endColumn":23,"suppressions":"62"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchConfigurations'. Either include it or remove the dependency array.","ArrayExpression",["63"],["64"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["65"],{"desc":"66","fix":"67"},{"desc":"66","fix":"68"},{"kind":"69","justification":"70"},"Update the dependencies array to be: [fetchConfigurations]",{"range":"71","text":"72"},{"range":"73","text":"72"},"directive","",[782,784],"[fetchConfigurations]",[1089,1091]]